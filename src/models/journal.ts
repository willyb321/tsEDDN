/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/
import * as mongoose from 'mongoose';
export interface JournalSchema {
	eddnSchema: string;
	StarSystem: string;
	StationName: string;
	uploader: string;
	header: {
		unixTimestamp: string;
		uploaderID: string;
		softwareName: string;
		softwareVersion: string;
		/**
	   * Timestamp upon receipt at the gateway. If present, this property will be overwritten by the gateway; submitters are not intended to populate this property.
	   */
		gatewayTimestamp?: string;
		[k: string]: any;
	};
	/**
	 * Contains all properties from the listed events in the client's journal minus Localised strings and the properties marked below as 'disallowed'
	 */
	message: {
		timestamp: string;
		event: ('Docked' | 'FSDJump' | 'Scan' | 'Location');
		/**
	   * Must be added by the sender if not present in the journal event
	   */
		StarSystem: string;
		/**
	   * Must be added by the sender if not present in the journal event
	   */
		StarPos: number[];
		CockpitBreach?: Disallowed;
		BoostUsed?: Disallowed;
		FuelLevel?: Disallowed;
		FuelUsed?: Disallowed;
		JumpDist?: Disallowed;
		Latitude?: Disallowed;
		Longitude?: Disallowed;
		[k: string]: any;
	};
}
export interface Disallowed {
	[k: string]: any;
}
// Or use plain javascript
import * as createMongooseSchema from 'json-schema-to-mongoose';

const refs = {
	disallowed: {
		not: {
			type: ['array', 'boolean', 'integer', 'number', 'null', 'object', 'string']
		}
	}
};

// Example schema to convert to mongoose schema
const schema = {
	eddnSchema: 'https://eddn.edcd.io/schemas/journal/1#',
	type: 'object',
	additionalProperties: false,
	properties: {
		$schemaRef: {
			type: 'string'
		},
		StarSystem: {
			type: 'string'
		},
		StationName: {
			type: 'string'
		},
		header: {
			type: 'object',
			additionalProperties: true,
			required: ['uploaderID', 'softwareName', 'softwareVersion'],
			properties: {
				unixTimestamp: {
					type: 'number'
				},
				uploaderID: {
					type: 'string'
				},
				softwareName: {
					type: 'string'
				},
				softwareVersion: {
					type: 'string'
				},
				gatewayTimestamp: {
					type: 'string',
					format: 'date-time',
					description: 'Timestamp upon receipt at the gateway. If present, this property will be overwritten by the gateway; submitters are not intended to populate this property.'
				}
			}
		},
		message: {
			type: 'object',
			description: "Contains all properties from the listed events in the client's journal minus Localised strings and the properties marked below as 'disallowed'",
			additionalProperties: true,
			required: ['timestamp', 'event', 'StarSystem', 'StarPos'],
			properties: {
				timestamp: {
					type: 'string',
					format: 'date-time'
				},
				event: {
					enum: ['Docked', 'FSDJump', 'Scan', 'Location']
				},
				StarSystem: {
					type: 'string',
					minLength: 1,
					description: 'Must be added by the sender if not present in the journal event'
				},
				StarPos: {
					type: 'array',
					items: {
						type: 'number'
					},
					minItems: 3,
					maxItems: 3,
					description: 'Must be added by the sender if not present in the journal event'
				},

				CockpitBreach: {
					$ref: 'disallowed'
				},
				BoostUsed: {
					$ref: 'disallowed'
				},
				FuelLevel: {
					$ref: 'disallowed'
				},
				FuelUsed: {
					$ref: 'disallowed'
				},
				JumpDist: {
					$ref: 'disallowed'
				},
				Latitude: {
					$ref: 'disallowed'
				},
				Longitude: {
					$ref: 'disallowed'
				}
			},
			patternProperties: {
				_Localised$: {
					$ref: 'disallowed'
				}
			}
		}
	}
};

export const journalSchema = createMongooseSchema(refs, schema);
export const journalModel = mongoose.model('JournalModel', journalSchema);
